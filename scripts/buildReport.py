#!/usr/bin/env python
# Creates textile formatted snippets for build issues
# and bitfile table in redmine.
#

import ConfigParser
import argparse
import subprocess
import re
import sys, os

def detect_vhdl_producer_version(filename):
    """Try to detect VHDL producer version from comments of generated output
    VHDL files. Returns version string or None if no information was found.

    Required format:
    ...
    -- VHDL producer version
    -- vX.Y.Z
    ...

    >>> detect_vhdl_producer_version('/path/to/ugt_constants.vhd')
    '2.4.0'
    """
    needle = "-- vhdl producer version"
    with open(filename) as fp:
        prev = ""
        for line in fp:
            if prev.startswith(needle):
                return line.strip(' -v').strip()
            prev = line.strip().lower()

def detect_gt_versions(filename):
    """Try to detect uGT, FDL and GTL versions from VHDL statements. Returns a
    dictionary containing version strings with keys used in VHDL constants.

    >>> detect_gt_versions('/path/to/gt_mp7_core_pkg.vhd')
    {'FRAME': '1.2.3', 'FDL_FW': '1.2.2', 'GTL_FW': '1.5.0'}
    """
    versions = {}
    regex = re.compile(r'^\s*\w+\s+(\w+)_(\w+)_VERSION.*\:\=\s*(\d+)')
    with open(filename) as fp:
        for line in fp:
            m = regex.match(line)
            if m:
                key = m.group(1)
                if key not in versions:
                    versions[key] = {}
                versions[key][m.group(2)] = m.group(3)
    for k, v in versions.iteritems():
        versions[k] = "{MAJOR}.{MINOR}.{REV}".format(**v)
    return versions

def detect_vivado_version(filename):
    """Try to detect Vivado version from log file generated at synthesis.

    >>> detect_vivado_version('/path/to/vivado.log')
    '2018.2'
    """
    regex = re.compile(r'^.*\s*Vivado\s+v(\d+\.\d+)')
    with open(filename) as fp:
        for line in fp:
            m = regex.match(line)
            if m:
                return m.group(1)

def detect_menu_url(dirname):
    """Try to detect menu SVN repository URL (if output generated by VHDL
    producer was already commited. Returns repository URL or an empty string
    if the directory is not part of an SVN repostory.

    >>> detect_menu_url('/path/to/L1Menu_Sample/')
    'https://svn.example.com/trunk/L1Menu_Sample'
    """
    try:
        return subprocess.check_output(['svn', 'info', '--show-item=url', dirname]).strip()
    except subprocess.CalledProcessError as e:
        return ""

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help="build config file (*.cfg)")
    return parser.parse_args()

def main():
    args = parse_args()

    config = ConfigParser.ConfigParser()
    config.read(args.filename)

    menu_dir = config.get('menu', 'location')
    buildarea_dir = config.get('firmware', 'buildarea')

    menu_name = config.get('menu', 'name')
    menu_dir = config.get('menu', 'location')
    menu_url = detect_menu_url(menu_dir)
    build_id = "0x{0}".format(config.get('menu', 'build'))
    n_modules = config.get('menu', 'modules')
    username = config.get('environment', 'username')
    build_raw = config.get('menu', 'build')
    build_id = "0x{0}".format(build_raw)
    mp7fw_tag = config.get('firmware', 'tag')
    ugt_tag = ""

    versions = {}
    versions['tm-vhdlproducer'] = detect_vhdl_producer_version(os.path.join(menu_dir, 'vhdl', 'module_0', 'src', 'ugt_constants.vhd'))
    versions['tm-reporter'] = ''
    versions['tm-editor'] = ''
    versions.update(detect_gt_versions(os.path.join(buildarea_dir, 'module_0', 'mp7_ugt', 'firmware', 'hdl', 'gt_mp7_core', 'gt_mp7_core_pkg.vhd')))
    versions['vivado'] = detect_vivado_version(os.path.join(buildarea_dir, 'module_0', 'vivado.log'))


    table = [
        ("Menu", menu_name),
        ("Build", build_id),
        ("Modules", n_modules),
        ("Created", config.get('environment', 'timestamp')),
        ("Username", username),
        ("Hostname", config.get('environment', 'hostname')),
        ("Vivado", versions['vivado']),
        ("Build area", buildarea_dir),
        ("Menu local dir", menu_dir),
        ("Menu repo url", menu_url),
        ("MP7 tag", mp7fw_tag),
        ("uGT tag", ugt_tag),
        ("uGT", versions['FRAME']),
        ("FDL", versions['FDL_FW']),
        ("GTL", versions['GTL_FW']),
        ("tm-vhdlproducer", versions['tm-vhdlproducer']),
        ("tm-reporter", versions['tm-reporter']),
        ("tm-editor", versions['tm-editor']),
    ]

    print("Insert into ISSUE description:\n")

    for row in table:
        print("|_<.{0} |{1} |".format(*row))

    def textile_strong(s):
        return "*{0}*".format(s)

    def textile_pre_inline(s):
        return "@{0}@".format(s)

    row = [
        menu_name,
        textile_pre_inline(build_id),
        username,
        textile_strong(mp7fw_tag),
        versions['FRAME'],
        versions['GTL_FW'],
        versions['FDL_FW'],
        n_modules,
        "#",
        "",
    ]
    print("\nPrepend BITFILES table:\n")
    print("|_.Menu |_.Build |_.Creator |_.MP7 tag |_.uGT |_.FDL |_.GTL |_.Modules |_.Issue |_.Notes |")
    print("|{0} |".format(" |".join(row)))

if __name__ == '__main__':
    main()

